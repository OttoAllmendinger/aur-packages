======================================================================
The Internet Communications Engine
======================================================================


Introduction
------------

Ice is a modern object-oriented toolkit that enables you to build
distributed applications with minimal effort. Ice allows you to focus
your efforts on your application logic while it takes care of all
interactions with low-level network programming interfaces. With Ice,
there is no need to worry about details such as opening network
connections, serializing and deserializing data for network
transmission, or retrying failed connection attempts (to name but a
few of dozens of such low-level details).

In addition to fully-featured and high-performance RPC, Ice also
provides a number of services. These services supply functionality
that most distributed applications require, such as event distribution
or server management.

Ice is available under the terms and conditions of the GNU General
Public License v2 (see the ICE_LICENSE file). Commercial licenses are
available for customers who wish to use Ice in proprietary products.
Please contact sales@zeroc.com for more information on licensing Ice.


Table of Contents
-----------------

  1. About this distribution
  2. Setting up your environment to use Ice
     - C++
     - Java
     - Python
     - .NET/Mono
     - Ruby
     - PHP
     - SELinux Notes (for Red Hat Enterprise Linux users)
  3. /etc/init.d scripts
  4. Using the IceGrid Administrative Console
  5. Demos
  6. Binary compatibility


======================================================================
1. About this distribution
======================================================================

Ice 3.4.1 for Linux is distributed in several RPM packages:

- The base Ice RPM contains the Slice files and associated
  documentation.

- The ice-libs RPM contains the C++ run-time libraries.

- The ice-utils RPM contains utilities necessary to administer an Ice
  installation.

- The ice-servers RPM contains all Ice servers along with sample
  init.d scripts.

- For each supported Ice language, C++, Java, Python, Ruby, PHP and
  .NET (Mono), we provide an associated run-time library RPM that
  enables you to execute Ice applications developed in that language.
  In addition, a development kit for each language is contained in a
  separate RPM.

These RPMs are available for download at the ZeroC web site at

  http://www.zeroc.com/download.html

Notes:

- Ice for .NET RPMs are currently available only on SuSE Enterprise
  Linux Server.


======================================================================
2. Setting up your environment to use Ice
======================================================================


C++
---

No additional compiler or linker options are required for an RPM
installation of the Ice for C++ development kit.


Java
----

To use Ice for Java, you must add Ice.jar to your CLASSPATH, as shown
below:

$ export CLASSPATH=/usr/share/java/Ice.jar:$CLASSPATH

If you intend to use Freeze for Java, you must include Freeze.jar in
your CLASSPATH along with Ice.jar:

$ export CLASSPATH=/usr/share/java/Freeze.jar:$CLASSPATH

Note that Freeze requires Berkeley DB. Freeze.jar contains a manifest
that automatically loads the Berkeley DB classes (db-4.8.30.jar),
which means you do not need to include this file in your CLASSPATH
when executing a Freeze application. However the JVM does require that
the directory containing Berkeley DB's native libraries be listed in
java.library.path, therefore you must add this directory to your
LD_LIBRARY_PATH. Assuming you are using the RPM installation of
Berkeley DB, the bash command is shown below:

$ export LD_LIBRARY_PATH=/usr/lib:$LD_LIBRARY_PATH

On a x86_64 system with a 64-bit JVM, the 64-bit Berkeley DB libraries
are installed in /usr/lib64, so use this setting instead:

$ export LD_LIBRARY_PATH=/usr/lib64:$LD_LIBRARY_PATH

When building a Java application that uses Freeze, you will need to
add the Berkeley DB JAR file to your CLASSPATH:

$ export CLASSPATH=/usr/share/java/db-4.8.30.jar:$CLASSPATH

Ice for Java supports protocol compression using the bzip2 classes
included with ant. Compression is automatically enabled if these
classes are present in your CLASSPATH. You can either add ant.jar to
your CLASSPATH, or download only the bzip2 classes from

  http://www.kohsuke.org/bzip2/

Note that these classes are a pure Java implementation of the bzip2
algorithm and therefore add significant latency to Ice requests.

When using the Ice for Java SSL plugin (IceSSL), you may experience
occasional hangs. The most likely reason is that your system's entropy
pool is empty. If you have sufficient system privileges, you can solve
this issue by editing the following file

<java.home>/jre/lib/security/java.security

and changing it to use /dev/urandom instead of /dev/random. If you do
not have permission to modify the security file, you can also use the
command-line option shown below:

$ java -Djava.security.egd=file:/dev/urandom MyClass ...

On Linux systems with IPv6 enabled, you may experience occasional
hangs the first time an Ice object adapter is activated within a JVM.
A work-around is to disable IPv6 support by setting the Java property
java.net.preferIPv4Stack to true. For example:

$ java -Djava.net.preferIPv4Stack=true MyClass ...

For more information on this issue, refer to Sun's bug database:

  http://bugs.sun.com/bugdatabase/view_bug.do?bug_id=6483406


Python
------

The Ice for Python run-time RPM (ice-python) installs the Ice
extension and its associated Python files into the "site-packages"
directory. The RPM also installs a ".pth" file that enables you to
import the various Ice modules without requiring any additional
configuration.


.NET/Mono
---------

The RPM installation adds the .NET run-time libraries to the global
assembly cache (GAC), so that no changes to your environment are
necessary to locate the assemblies.

The instructions for running the demos assume that you have configured
your kernel to automatically execute the Mono interpreter. The page
shown below describes how to configure your kernel to register Mono's
.exe files as non-native binaries:

  http://www.mono-project.com/Guide:Running_Mono_Applications

If you don't want to do this you need to run the executable with
mono. For example,

$ mono server.exe


Ruby
----

The Ice for Ruby run-time RPM (ice-ruby) installs the Ice extension
and its associated Ruby files into the "site_ruby" directory. No
additional configuration is necessary to use Ice in your Ruby programs.


PHP
---

The Ice extension for PHP is loaded automatically when the interpreter
loads the contents of the file /etc/php.d/ice.ini (on Red Hat
Enterprise Linux) or /etc/php5/conf.d/ice.ini (on SuSE Linux
Enterprise Server).  This file contains the line shown below:

extension=IcePHP.so

You can modify this file to include additional configuration
directives, such as those used by the Ice extension.

At run time, the PHP interpreter requires the Ice shared libraries.

You can verify that the Ice extension is installed properly by
examining the output of the "php -m" command, or by calling the
phpinfo() function from a script.

Your application will also need to include at least some of the Ice
for PHP run-time source files (installed in /usr/share/php on RHEL5
and /usr/share/php5 on SLES11). This installation directory is
included in PHP's default include path, which you can verify by
executing the following command:

% php -i | grep include_path

If the installation directory is listed, no further action is
necessary to make the run-time source files available to your
application. Otherwise, you can modify the include_path setting in
php.ini to add the installation directory:

include_path = /usr/share/php:...

Another option is to modify the include path from within your
script prior to including any Ice run-time file:

// PHP
ini_set('include_path',
  ini_get('include_path') . PATH_SEPARATOR . '/usr/share/php');
require 'Ice.php'; // Load the core Ice run time definitions.


SELinux Notes (for Red Hat Enterprise Linux users)
--------------------------------------------------

SELinux augments the traditional Unix permissions with a number of
new features. In particular, SELinux can prevent the httpd daemon from
opening network connections and reading files without the proper
SELinux types.

If you suspect that your IcePHP application does not work due to
SELinux restrictions, we recommend that you first try it with SELinux
disabled. As root, run:

# setenforce 0

to disable SELinux until the next reboot of your computer.

If you want to run httpd with IcePHP and SELinux enabled, you must do
the following:

- Allow httpd to open network connections:

  # setsebool httpd_can_network_connect=1

  (add the -P option to make this setting persistent across reboots)

- Make sure any .ice file used by your PHP scripts can be read by
  httpd. The enclosing directory also needs to be accessible. For
  example:

  # chcon -R -t httpd_sys_content_t /opt/MyApp/slice

For more information on SELinux in Red Hat Enterprise Linux, refer
to the link below:

  http://www.redhat.com/f/pdf/sec/WHP001USselinux.pdf


======================================================================
3. /etc/init.d scripts
======================================================================

The ice-servers RPM includes the following sample /etc/init.d scripts
and associated configuration files:

- /etc/init.d/icegridregistry and /etc/icegridregistry.conf
- /etc/init.d/icegridnode and /etc/icegridnode.conf
- /etc/init.d/glacier2router and /etc/glacier2router.conf

The installation of this RPM also creates a user account and group
for running these services (account ice and group ice), and the
directories for the icegridregistry and icegridnode data
(/var/lib/ice/icegrid/registry and /var/lib/ice/icegrid/node1).

By default, all these services are off at all runlevels. You need
to manually switch on one or more runlevels, for example:

#
# On a Red Hat Enterprise Linux system, configure the icegridregistry
# to start at runlevel 3 and 5:
#
chkconfig --level 35 icegridregistry on

#
# On a SuSE Linux Enterprise Server system, configure the
# icegridregistry to start at runlevel 3 and 5:
#
chkconfig icegridregistry 35

Before doing so, please review the script itself and its associated
configuration file.


======================================================================
4. Using the IceGrid Administrative Console
======================================================================

A Java-based graphical tool for administering IceGrid applications
is included in this distribution. The Java archive file is installed
as

/usr/share/java/IceGridGUI.jar

With a suitable Java installation, you can execute the application
using the following command:

$ icegridgui

or

$ java -jar IceGridGUI.jar

On SuSE Linux Enterprise Server when using the IBM JRE, the GUI might
warn about not being able to create the system preferences directory.
To get rid of this warning, you can either run the icegridgui once as
root or create the /usr/lib/jre/.systemPrefs directory (this directory
should be world readable).


======================================================================
5. Demos
======================================================================

Sample programs are provided in the Ice-3.4.1-demos.tar.gz package,
which can be downloaded from the ZeroC web site at

  http://www.zeroc.com/download.html

Please refer to the README.DEMOS file included in that package for
more information.


======================================================================
6. Binary compatibility
======================================================================

Please refer to the RELEASE_NOTES file included in this distribution
for information on binary compatibility and detailed upgrade
instructions.
