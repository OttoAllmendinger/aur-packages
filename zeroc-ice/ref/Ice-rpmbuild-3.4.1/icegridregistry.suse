#!/bin/bash
#
# Copyright (c) 2007-2010 ZeroC, Inc. All rights reserved.
#
# icegridregistry   This shell script takes care of starting and 
#                   stopping the icegridregistry daemon.
#

### BEGIN INIT INFO
# Provides:          icegridregistry
# Required-Start:    $network
# Required-Stop:     $network
# Default-Start:     3 5
# Default-Stop:      0 1 2 6
# Short-Description: Start the IceGrid registry daemon.
# Description:       The IceGrid registry daemon.
#	IceGrid is the server deployment and monitoring for the Internet
#	Communications Engine (Ice). An IceGrid domain consists of one master
#	registry, zero or more slave registries, and zero or more IceGrid nodes.  
### END INIT INFO

#
# First reset status of this service
#
. /etc/rc.status
rc_reset

#
# The IceGrid registry user; root is allowed, but not necessary, therefore
# it is recommended to use a non-root account.
#
user=ice

#
# The IceGrid registry configuration file
#
registryconf="/etc/icegridregistry.conf"

prog="/usr/bin/icegridregistry"

progbase=${prog##*/}
pidfile=/var/run/$progbase.pid

options="--daemon --pidfile $pidfile --Ice.Config=$registryconf"


#
# Check for missing binaries
#
test -x $prog || { echo "$prog not installed"; 
	if [ "$1" = "stop" ]; then exit 0;
	else exit 5; fi; }

#
# Verify config file is there
#
test -r $registryconf || { echo "$registryconf does not exist";
	if [ "$1" = "stop" ]; then exit 0;
	else exit 6; fi; }


#
# Start/stop etc.
#
case "$1" in
    start)
        echo -n "Starting $progbase"

        if [ "$user" != "root" ]
        then
            startoptions="-u $user"
    
	    if [ ! -e $pidfile ]
	    then
		echo 0 > $pidfile
	    fi
	    chown $user $pidfile
            if [ `cat $pidfile` = "0" ]
            then
               startoptions="$startoptions -f"
	    fi
        fi
        startoptions="$startoptions -p $pidfile"           

        startproc $startoptions $prog $options
        rc_status -v
        ;;
    stop)
        echo -n "Stopping $progbase"
	killproc -p $pidfile -TERM $prog
	rc_status -v
        ;;
    try-restart)
        ## Stop the service and if this succeeds (i.e. the 
        ## service was running before), start it again.
        $0 status >/dev/null &&  $0 restart

        # Remember status and be quiet
        rc_status
        ;;
    restart|force-reload|reload)
        ## Stop the service and regardless of whether it was
        ## running or not, start it again.
        $0 stop
        $0 start

        # Remember status and be quiet
        rc_status
        ;;
    status)
	echo -n "Checking for service $progbase "
        ## Check status with checkproc(8), if process is running
        ## checkproc will return with exit status 0.

        # Status has a slightly different for the status command:
        # 0 - service running
        # 1 - service dead, but /var/run/  pid  file exists
        # 2 - service dead, but /var/lock/ lock file exists
        # 3 - service not running

	checkproc -p $pidfile $prog

	rc_status -v
	;;
    *)
	echo "Usage: $0 {start|stop|status|try-restart|restart|force-reload|reload}"
	exit 1
	;;
esac
rc_exit
